[{"path":"https://gbganalyst.github.io/forstringr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 forstringr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://gbganalyst.github.io/forstringr/articles/forstringr.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"String Manipulation Package for Those Familiar with Microsoft Excel","text":"can install forstringr package CRAN : development version GitHub :","code":"install.packages(\"forstringr\") if(!require(\"devtools\")){  install.packages(\"devtools\") }  devtools::install_github(\"gbganalyst/forstringr\")"},{"path":"https://gbganalyst.github.io/forstringr/articles/forstringr.html","id":"length_omit_na","dir":"Articles","previous_headings":"","what":"length_omit_na()","title":"String Manipulation Package for Those Familiar with Microsoft Excel","text":"length_omitna() counts non-missing elements vector.","code":"library(forstringr) #> Loading required package: stringr  ethnicity <- c(\"Hausa\", NA, \"Yoruba\", \"Ijaw\", \"Igbo\", NA, \"Ibibio\", \"Tiv\", \"Fulani\", \"Kanuri\", \"Others\")  length(ethnicity) # Count all the observations, including the NAs. #> [1] 11  length_omit_na(ethnicity) #> [1] 9"},{"path":"https://gbganalyst.github.io/forstringr/articles/forstringr.html","id":"str_left","dir":"Articles","previous_headings":"","what":"str_left()","title":"String Manipulation Package for Those Familiar with Microsoft Excel","text":"Given character vector, str_left() returns left side string. examples:","code":"str_left(\"Nigeria\") #> [1] \"N\"  str_left(\"Nigeria\", n = 3) #> [1] \"Nig\"  str_left(c(\"Female\", \"Male\", \"Male\", \"Female\")) #> [1] \"F\" \"M\" \"M\" \"F\""},{"path":"https://gbganalyst.github.io/forstringr/articles/forstringr.html","id":"str_right","dir":"Articles","previous_headings":"","what":"str_right()","title":"String Manipulation Package for Those Familiar with Microsoft Excel","text":"Given character vector, str_right() returns right side string. examples:","code":"str_right(\"July 20, 2022\", 4) #> [1] \"2022\"  str_right(\"Sale Price\", n = 5) #> [1] \"Price\""},{"path":"https://gbganalyst.github.io/forstringr/articles/forstringr.html","id":"str_mid","dir":"Articles","previous_headings":"","what":"str_mid()","title":"String Manipulation Package for Those Familiar with Microsoft Excel","text":"Like Microsoft Excel, str_mid()returns specific number characters text string, starting position specify, based number characters select.","code":"str_mid(\"Super Eagle\", 7, 5) #> [1] \"Eagle\"  str_mid(\"Oyo Ibadan\", 5, 6) #> [1] \"Ibadan\""},{"path":"https://gbganalyst.github.io/forstringr/articles/forstringr.html","id":"str_split_extract","dir":"Articles","previous_headings":"","what":"str_split_extract()","title":"String Manipulation Package for Those Familiar with Microsoft Excel","text":"want split string pieces extract results using specific index position, , use str_split_extract(). can interpret interpret follows: Given character string, S, extract element given position, k, result splitting S given pattern, m. example:","code":"top_10_richest_nig <- c(\"Aliko Dangote\", \"Mike Adenuga\", \"Femi Otedola\", \"Arthur Eze\", \"Abdulsamad Rabiu\", \"Cletus Ibeto\", \"Orji Uzor Kalu\", \"ABC Orjiakor\", \"Jimoh Ibrahim\", \"Tony Elumelu\")  first_name <- str_split_extract(top_10_richest_nig, \" \", 1)  first_name #>  [1] \"Aliko\"      \"Mike\"       \"Femi\"       \"Arthur\"     \"Abdulsamad\" #>  [6] \"Cletus\"     \"Orji\"       \"ABC\"        \"Jimoh\"      \"Tony\""},{"path":"https://gbganalyst.github.io/forstringr/articles/forstringr.html","id":"str_extract_part","dir":"Articles","previous_headings":"","what":"str_extract_part()","title":"String Manipulation Package for Those Familiar with Microsoft Excel","text":"Extract strings given pattern. example:","code":"first_name <- str_extract_part(top_10_richest_nig,  pattern = \" \", before = TRUE)  first_name #>  [1] \"Aliko\"      \"Mike\"       \"Femi\"       \"Arthur\"     \"Abdulsamad\" #>  [6] \"Cletus\"     \"Orji Uzor\"  \"ABC\"        \"Jimoh\"      \"Tony\"  revenue <- c(\"$159\", \"$587\", \"$891\", \"$207\", \"$793\")  str_extract_part(revenue, pattern = \"$\", before = FALSE) #> [1] \"159\" \"587\" \"891\" \"207\" \"793\""},{"path":"https://gbganalyst.github.io/forstringr/articles/forstringr.html","id":"str_englue","dir":"Articles","previous_headings":"","what":"str_englue()","title":"String Manipulation Package for Those Familiar with Microsoft Excel","text":"can dynamically label ggplot2 plots glue operators {} {{}} using str_englue(). function allows easier string interpolation within curly braces plot labelling ggplot2. example, value wrapped { } inserted string can also understand embracing, {{ }}, automatically inserts given variable name.","code":"library(ggplot2)  histogram_plot <- function(df, var, binwidth) {  df |>    ggplot(aes(x = {{ var }})) +    geom_histogram(binwidth = binwidth) +    labs(title = str_englue(\"A histogram of {{var}} with binwidth {binwidth}\")) }  iris |> histogram_plot(Sepal.Length, binwidth = 0.1)"},{"path":"https://gbganalyst.github.io/forstringr/articles/forstringr.html","id":"str_rm_whitespace_df","dir":"Articles","previous_headings":"","what":"str_rm_whitespace_df()","title":"String Manipulation Package for Those Familiar with Microsoft Excel","text":"Extra spaces accidentally entered working survey data, problems can arise evaluating data extra spaces. Therefore, function str_rm_whitespace_df() eliminates data frame unnecessary leading, trailing, whitespaces.","code":"# A dataframe with whitespaces  richest_in_nigeria #> # A tibble: 10 × 5 #>     Rank Name                   `Net worth`         Age `Source of Wealth`       #>    <dbl> <chr>                  <chr>             <dbl> <chr>                    #>  1     1 \" Aliko Dangote\"       \"$14 Billion\"        64 \"  Cement and Sugar \"    #>  2     2 \"Mike Adenuga\"         \"$7.9  Billion \"     68 \"Telecommunication,    … #>  3     3 \"Femi   Otedola\"       \"$5.9   Billion\"     59 \"Oil  and Gas\"           #>  4     4 \" Arthur Eze\"          \"$5 Billion\"         73 \"Oil and Gas\"            #>  5     5 \"Abdulsamad     Rabiu\" \"$3.7 Billion\"       61 \"Cement   and Sugar\"     #>  6     6 \" Cletus Ibeto \"       \" $3.5 Billion\"      69 \"Automobile, Real Estat… #>  7     7 \"Orji Uzor Kalu\"       \"$3.2 Billion\"       61 \"Furniture,    Publishi… #>  8     8 \"ABC Orjiakor \"        \"  $1.2 Billion\"     63 \"Oil and Gas\"            #>  9     9 \"  Jimoh Ibrahim\"      \"$1 Billion \"        54 \"Insurance, Oil and Gas… #> 10    10 \"Tony   Elumelu\"       \"$900    Million\"    58 \"  Banking  \" # A dataframe with no whitespaces  str_rm_whitespace_df(richest_in_nigeria) #> # A tibble: 10 × 5 #>     Rank Name             `Net worth`    Age `Source of Wealth`                  #>    <dbl> <chr>            <chr>        <dbl> <chr>                               #>  1     1 Aliko Dangote    $14 Billion     64 Cement and Sugar                    #>  2     2 Mike Adenuga     $7.9 Billion    68 Telecommunication, Oil, and Gas     #>  3     3 Femi Otedola     $5.9 Billion    59 Oil and Gas                         #>  4     4 Arthur Eze       $5 Billion      73 Oil and Gas                         #>  5     5 Abdulsamad Rabiu $3.7 Billion    61 Cement and Sugar                    #>  6     6 Cletus Ibeto     $3.5 Billion    69 Automobile, Real Estate             #>  7     7 Orji Uzor Kalu   $3.2 Billion    61 Furniture, Publishing               #>  8     8 ABC Orjiakor     $1.2 Billion    63 Oil and Gas                         #>  9     9 Jimoh Ibrahim    $1 Billion      54 Insurance, Oil and Gas, Real Estate #> 10    10 Tony Elumelu     $900 Million    58 Banking"},{"path":"https://gbganalyst.github.io/forstringr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ezekiel Ogundepo. Author, maintainer. Olubukunola Oyedele. Contributor. Fatimo Adebanjo. Contributor.","code":""},{"path":"https://gbganalyst.github.io/forstringr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ogundepo E (2024). forstringr: String Manipulation Package Familiar 'Microsoft Excel'. R package version 1.0.0, https://gbganalyst.github.io/forstringr/, https://github.com/gbganalyst/forstringr.","code":"@Manual{,   title = {forstringr: String Manipulation Package for Those Familiar with 'Microsoft Excel'},   author = {Ezekiel Ogundepo},   year = {2024},   note = {R package version 1.0.0, https://gbganalyst.github.io/forstringr/},   url = {https://github.com/gbganalyst/forstringr}, }"},{"path":[]},{"path":"https://gbganalyst.github.io/forstringr/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"String Manipulation Package for Those Familiar with Microsoft\n    Excel","text":"string (character) data type typically requires manipulation helpful data analysts. Thus, need robust package task. forstringr new package built top ‘stringr’ execute various string manipulations R programming. main aim ‘forstringr’ simplify string manipulation R beginners. package combines power adaptability manipulation tools tidyr dplyr. Like stringr package, functions forstringr begin str_. quick video tutorial, gave talk Africa R users meetup, can find .","code":""},{"path":"https://gbganalyst.github.io/forstringr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"String Manipulation Package for Those Familiar with Microsoft\n    Excel","text":"can install forstringr package CRAN : development version GitHub ","code":"install.packages(\"forstringr\") if(!require(\"devtools\")){  install.packages(\"devtools\") }  devtools::install_github(\"gbganalyst/forstringr\")"},{"path":"https://gbganalyst.github.io/forstringr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"String Manipulation Package for Those Familiar with Microsoft\n    Excel","text":"section provides concise overview different functions available forstringr package. functions serve various purposes designed aid string manipulation tasks. length_omit_na() str_title_case() str_left() str_right() str_mid() str_split_extract() str_extract_part() str_englue() str_rm_whitespace_df()","code":""},{"path":"https://gbganalyst.github.io/forstringr/index.html","id":"length_omit_na","dir":"","previous_headings":"","what":"length_omit_na()","title":"String Manipulation Package for Those Familiar with Microsoft\n    Excel","text":"length_omitna() counts non-missing elements vector.","code":"library(forstringr) #> Loading required package: stringr  ethnicity <- c(\"Hausa\", NA, \"Yoruba\", \"Ijaw\", \"Igbo\", NA, \"Ibibio\", \"Tiv\", \"Fulani\", \"Kanuri\", \"Others\")  # count all the observations, including NAs.  length(ethnicity)  #> [1] 11   # count all the observations, without NAs.  length_omit_na(ethnicity) #> [1] 9"},{"path":"https://gbganalyst.github.io/forstringr/index.html","id":"str_title_case","dir":"","previous_headings":"","what":"str_title_case()","title":"String Manipulation Package for Those Familiar with Microsoft\n    Excel","text":"str_title_case() converts string title case, capitalizing first letter word ignoring articles, prepositions, conjunctions. Please note str_title_case() different stringr::str_to_title() converts title case, first letter word capitalized.","code":"words <- \"the quick brown fox jumps over a lazy dog\"  str_title_case(words) # from forstringr package #> [1] \"The Quick Brown Fox Jumps over a Lazy Dog\"  str_to_title(words) # from stringr package #> [1] \"The Quick Brown Fox Jumps Over A Lazy Dog\""},{"path":"https://gbganalyst.github.io/forstringr/index.html","id":"str_left","dir":"","previous_headings":"","what":"str_left()","title":"String Manipulation Package for Those Familiar with Microsoft\n    Excel","text":"Given character vector, str_left() returns left side string. examples:","code":"str_left(\"Nigeria\") #> [1] \"N\"  str_left(\"Nigeria\", n = 3) #> [1] \"Nig\"  str_left(c(\"Female\", \"Male\", \"Male\", \"Female\")) #> [1] \"F\" \"M\" \"M\" \"F\""},{"path":"https://gbganalyst.github.io/forstringr/index.html","id":"str_right","dir":"","previous_headings":"","what":"str_right()","title":"String Manipulation Package for Those Familiar with Microsoft\n    Excel","text":"Given character vector, str_right() returns right side string. examples:","code":"str_right(\"July 20, 2022\", 4) #> [1] \"2022\"  str_right(\"Sale Price\", n = 5) #> [1] \"Price\""},{"path":"https://gbganalyst.github.io/forstringr/index.html","id":"str_mid","dir":"","previous_headings":"","what":"str_mid()","title":"String Manipulation Package for Those Familiar with Microsoft\n    Excel","text":"Like Microsoft Excel, str_mid()returns specific number characters text string, starting position specify, based number characters select.","code":"str_mid(\"Super Eagle\", 7, 5) #> [1] \"Eagle\"  str_mid(\"Oyo Ibadan\", 5, 6) #> [1] \"Ibadan\""},{"path":"https://gbganalyst.github.io/forstringr/index.html","id":"str_split_extract","dir":"","previous_headings":"","what":"str_split_extract()","title":"String Manipulation Package for Those Familiar with Microsoft\n    Excel","text":"want split string pieces extract results using specific index position, , use str_split_extract(). can interpret follows: Given character string, S, extract element given position, k, result splitting S given pattern, m. example:","code":"top_10_richest_nig <- c(\"Aliko Dangote\", \"Mike Adenuga\", \"Femi Otedola\", \"Arthur Eze\", \"Abdulsamad Rabiu\", \"Cletus Ibeto\", \"Orji Uzor Kalu\", \"ABC Orjiakor\", \"Jimoh Ibrahim\", \"Tony Elumelu\")  first_name <- str_split_extract(top_10_richest_nig, \" \", 1)  first_name #>  [1] \"Aliko\"      \"Mike\"       \"Femi\"       \"Arthur\"     \"Abdulsamad\" #>  [6] \"Cletus\"     \"Orji\"       \"ABC\"        \"Jimoh\"      \"Tony\""},{"path":"https://gbganalyst.github.io/forstringr/index.html","id":"str_extract_part","dir":"","previous_headings":"","what":"str_extract_part()","title":"String Manipulation Package for Those Familiar with Microsoft\n    Excel","text":"Extract strings given pattern. example:","code":"first_name <- str_extract_part(top_10_richest_nig,  pattern = \" \", before = TRUE)  first_name #>  [1] \"Aliko\"      \"Mike\"       \"Femi\"       \"Arthur\"     \"Abdulsamad\" #>  [6] \"Cletus\"     \"Orji Uzor\"  \"ABC\"        \"Jimoh\"      \"Tony\"  revenue <- c(\"$159\", \"$587\", \"$891\", \"$207\", \"$793\")  str_extract_part(revenue, pattern = \"$\", before = FALSE) #> [1] \"159\" \"587\" \"891\" \"207\" \"793\""},{"path":"https://gbganalyst.github.io/forstringr/index.html","id":"str_englue","dir":"","previous_headings":"","what":"str_englue()","title":"String Manipulation Package for Those Familiar with Microsoft\n    Excel","text":"can dynamically label ggplot2 plots glue operators {} {{}} using str_englue(). example, value wrapped { } inserted string automatically inserts given variable name using {{ }}. important note str_englue() must used inside function. str_englue(\"{{ var }}\") defuses argument var transforms string using default name operation.","code":"library(ggplot2)  histogram_plot <- function(df, var, binwidth) {  df %>%      ggplot(aes(x = {{ var }})) +    geom_histogram(binwidth = binwidth) +    labs(title = str_englue(\"A histogram of {{var}} with binwidth {binwidth}\")) }  iris %>%    histogram_plot(Sepal.Length, binwidth = 0.1)"},{"path":"https://gbganalyst.github.io/forstringr/index.html","id":"str_rm_whitespace_df","dir":"","previous_headings":"","what":"str_rm_whitespace_df()","title":"String Manipulation Package for Those Familiar with Microsoft\n    Excel","text":"Extra spaces accidentally entered working survey data, problems can arise evaluating data extra spaces. Therefore, function str_rm_whitespace_df() eliminates data frame unnecessary leading, trailing, whitespaces.","code":"# a dataframe with whitespaces  richest_in_nigeria #> # A tibble: 10 × 5 #>     Rank Name                   `Net worth`         Age `Source of Wealth`       #>    <dbl> <chr>                  <chr>             <dbl> <chr>                    #>  1     1 \" Aliko Dangote\"       \"$14 Billion\"        64 \"  Cement and Sugar \"    #>  2     2 \"Mike Adenuga\"         \"$7.9  Billion \"     68 \"Telecommunication,    … #>  3     3 \"Femi   Otedola\"       \"$5.9   Billion\"     59 \"Oil  and Gas\"           #>  4     4 \" Arthur Eze\"          \"$5 Billion\"         73 \"Oil and Gas\"            #>  5     5 \"Abdulsamad     Rabiu\" \"$3.7 Billion\"       61 \"Cement   and Sugar\"     #>  6     6 \" Cletus Ibeto \"       \" $3.5 Billion\"      69 \"Automobile, Real Estat… #>  7     7 \"Orji Uzor Kalu\"       \"$3.2 Billion\"       61 \"Furniture,    Publishi… #>  8     8 \"ABC Orjiakor \"        \"  $1.2 Billion\"     63 \"Oil and Gas\"            #>  9     9 \"  Jimoh Ibrahim\"      \"$1 Billion \"        54 \"Insurance, Oil and Gas… #> 10    10 \"Tony   Elumelu\"       \"$900    Million\"    58 \"  Banking  \" # a dataframe with no whitespaces  str_rm_whitespace_df(richest_in_nigeria) #> # A tibble: 10 × 5 #>     Rank Name             `Net worth`    Age `Source of Wealth`                  #>    <dbl> <chr>            <chr>        <dbl> <chr>                               #>  1     1 Aliko Dangote    $14 Billion     64 Cement and Sugar                    #>  2     2 Mike Adenuga     $7.9 Billion    68 Telecommunication, Oil, and Gas     #>  3     3 Femi Otedola     $5.9 Billion    59 Oil and Gas                         #>  4     4 Arthur Eze       $5 Billion      73 Oil and Gas                         #>  5     5 Abdulsamad Rabiu $3.7 Billion    61 Cement and Sugar                    #>  6     6 Cletus Ibeto     $3.5 Billion    69 Automobile, Real Estate             #>  7     7 Orji Uzor Kalu   $3.2 Billion    61 Furniture, Publishing               #>  8     8 ABC Orjiakor     $1.2 Billion    63 Oil and Gas                         #>  9     9 Jimoh Ibrahim    $1 Billion      54 Insurance, Oil and Gas, Real Estate #> 10    10 Tony Elumelu     $900 Million    58 Banking"},{"path":"https://gbganalyst.github.io/forstringr/reference/community_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Data containing whitespaces — community_data","title":"Data containing whitespaces — community_data","text":"survey data collected using Google form demonstrate str_rm_whitespace_df() function forstringr package used eliminate whitespace.","code":""},{"path":"https://gbganalyst.github.io/forstringr/reference/community_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data containing whitespaces — community_data","text":"","code":"community_data"},{"path":"https://gbganalyst.github.io/forstringr/reference/community_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data containing whitespaces — community_data","text":"data frame 32 rows 8 variables: Date Form submission date First_name First name respondent Gender gender respondent State State province living Degree Whether respondent degree Year year graduation college Use_R Whether respondent used R data science Community data science community respondent associated ","code":""},{"path":"https://gbganalyst.github.io/forstringr/reference/community_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data containing whitespaces — community_data","text":"Ezekiel Esther developed Google form used collect data. clicking following link, may also add data: https://docs.google.com/forms/d/e/1FAIpQLSeAhIBaze-pTHghyIKDZEx5kDuke0oYv0YPqg4gtGKijHSaUg/viewform","code":""},{"path":"https://gbganalyst.github.io/forstringr/reference/forstringr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"forstringr: String Manipulation Package for Those Familiar with 'Microsoft Excel' — forstringr-package","title":"forstringr: String Manipulation Package for Those Familiar with 'Microsoft Excel' — forstringr-package","text":"goal 'forstringr' enable complex string manipulation R especially familiar LEFT(), RIGHT(), MID() functions Microsoft Excel. package combines power 'stringr' manipulation packages 'dplyr' 'tidyr'.","code":""},{"path":[]},{"path":"https://gbganalyst.github.io/forstringr/reference/forstringr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"forstringr: String Manipulation Package for Those Familiar with 'Microsoft Excel' — forstringr-package","text":"Maintainer: Ezekiel Ogundepo gbganalyst@gmail.com (ORCID) contributors: Olubukunola Oyedele olubukunola.oyedele@54gene.com [contributor] Fatimo Adebanjo adebanjofatimo2000@gmail.com [contributor]","code":""},{"path":"https://gbganalyst.github.io/forstringr/reference/length_omit_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Length of an object — length_omit_na","title":"Length of an object — length_omit_na","text":"length_omitna() counts non-missing elements vector.","code":""},{"path":"https://gbganalyst.github.io/forstringr/reference/length_omit_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Length of an object — length_omit_na","text":"","code":"length_omit_na(x)"},{"path":"https://gbganalyst.github.io/forstringr/reference/length_omit_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Length of an object — length_omit_na","text":"x Input vector. Either vector, something coercible one.","code":""},{"path":"https://gbganalyst.github.io/forstringr/reference/length_omit_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Length of an object — length_omit_na","text":"integer","code":""},{"path":[]},{"path":"https://gbganalyst.github.io/forstringr/reference/length_omit_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Length of an object — length_omit_na","text":"","code":"ethnicity <- c(\"Hausa\", NA, \"Yoruba\", \"Igbo\", NA, \"Fulani\", \"Kanuri\", \"Others\")  length_omit_na(ethnicity) #> [1] 6  length(ethnicity) #> [1] 8"},{"path":"https://gbganalyst.github.io/forstringr/reference/richest_in_nigeria.html","id":null,"dir":"Reference","previous_headings":"","what":"Rank of billionaires in Nigeria — richest_in_nigeria","title":"Rank of billionaires in Nigeria — richest_in_nigeria","text":"dataset containing list top ten billionaires Nigeria.","code":""},{"path":"https://gbganalyst.github.io/forstringr/reference/richest_in_nigeria.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rank of billionaires in Nigeria — richest_in_nigeria","text":"","code":"richest_in_nigeria"},{"path":"https://gbganalyst.github.io/forstringr/reference/richest_in_nigeria.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Rank of billionaires in Nigeria — richest_in_nigeria","text":"data frame 10 rows 5 variables: Rank rank 1 10 Name full name billionaires Net worth net worth billion dollars Age current age billionaires Source Wealth origin billionaires' entire body wealth","code":""},{"path":"https://gbganalyst.github.io/forstringr/reference/richest_in_nigeria.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Rank of billionaires in Nigeria — richest_in_nigeria","text":"https://rnn.ng/richest-men--nigeria/","code":""},{"path":"https://gbganalyst.github.io/forstringr/reference/str_englue.html","id":null,"dir":"Reference","previous_headings":"","what":"Dynamic plot labels using glue operators — str_englue","title":"Dynamic plot labels using glue operators — str_englue","text":"str_englue() helps solve labeling problem plotting. example, value wrapped { } inserted string can also understands embracing, {{ }}, automatically inserts given variable name.","code":""},{"path":"https://gbganalyst.github.io/forstringr/reference/str_englue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dynamic plot labels using glue operators — str_englue","text":"","code":"str_englue(x, env, error_call, error_arg)"},{"path":"https://gbganalyst.github.io/forstringr/reference/str_englue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dynamic plot labels using glue operators — str_englue","text":"x string interpolate glue operators. env User environment interpolation data lives case wrapping englue() another function. error_call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information. error_arg argument name string. argument mentioned error messages input origin problem.","code":""},{"path":[]},{"path":"https://gbganalyst.github.io/forstringr/reference/str_englue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dynamic plot labels using glue operators — str_englue","text":"","code":"# \\donttest{ library(ggplot2)  histogram_plot <- function(df, var, binwidth) {    ggplot(df, aes(x = {{ var }})) +    geom_histogram(binwidth = binwidth) +    labs(title = str_englue(\"A histogram of {{var}} with binwidth {binwidth}\")) }  histogram_plot(iris, Sepal.Length, binwidth = 0.1)  # }"},{"path":"https://gbganalyst.github.io/forstringr/reference/str_extract_part.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract strings before or after a given pattern — str_extract_part","title":"Extract strings before or after a given pattern — str_extract_part","text":"Vectorised string pattern.","code":""},{"path":"https://gbganalyst.github.io/forstringr/reference/str_extract_part.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract strings before or after a given pattern — str_extract_part","text":"","code":"str_extract_part(string, pattern, before = TRUE)"},{"path":"https://gbganalyst.github.io/forstringr/reference/str_extract_part.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract strings before or after a given pattern — str_extract_part","text":"string character vector. pattern Pattern look . position string extract . TRUE, extract occur pattern; FALSE, happen pattern.","code":""},{"path":"https://gbganalyst.github.io/forstringr/reference/str_extract_part.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract strings before or after a given pattern — str_extract_part","text":"subset input vector.","code":""},{"path":[]},{"path":"https://gbganalyst.github.io/forstringr/reference/str_extract_part.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract strings before or after a given pattern — str_extract_part","text":"","code":"weekdays <- c(   \"Monday_1\", \"Tuesday_2\", \"Wednesday_3\", \"Thursday_4\",   \"Friday_5\", \"Saturday_6\", \"Sunday_7\" )  str_extract_part(weekdays, before = TRUE, pattern = \"_\") #> [1] \"Monday\"    \"Tuesday\"   \"Wednesday\" \"Thursday\"  \"Friday\"    \"Saturday\"  #> [7] \"Sunday\"     str_extract_part(c(\"$159\", \"$587\", \"$897\"), before = FALSE, pattern = \"$\") #> [1] \"159\" \"587\" \"897\""},{"path":"https://gbganalyst.github.io/forstringr/reference/str_left.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a substring from the beginning of a specified string — str_left","title":"Returns a substring from the beginning of a specified string — str_left","text":"Given character vector, str_left() returns left side string.","code":""},{"path":"https://gbganalyst.github.io/forstringr/reference/str_left.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a substring from the beginning of a specified string — str_left","text":"","code":"str_left(string, n = 1)"},{"path":"https://gbganalyst.github.io/forstringr/reference/str_left.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a substring from the beginning of a specified string — str_left","text":"string character left portion returned. n Optional. number characters return left side string","code":""},{"path":"https://gbganalyst.github.io/forstringr/reference/str_left.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns a substring from the beginning of a specified string — str_left","text":"character vector","code":""},{"path":[]},{"path":"https://gbganalyst.github.io/forstringr/reference/str_left.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a substring from the beginning of a specified string — str_left","text":"","code":"str_left(\"Nigeria\") #> [1] \"N\" str_left(\"Nigeria\", n = 3) #> [1] \"Nig\" str_left(c(\"Female\", \"Male\", \"Male\", \"Female\")) #> [1] \"F\" \"M\" \"M\" \"F\""},{"path":"https://gbganalyst.github.io/forstringr/reference/str_mid.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a segment of character strings — str_mid","title":"Returns a segment of character strings — str_mid","text":"str_mid() returns specific number characters text string, starting position specify, based number characters specify.","code":""},{"path":"https://gbganalyst.github.io/forstringr/reference/str_mid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a segment of character strings — str_mid","text":"","code":"str_mid(string, start, n)"},{"path":"https://gbganalyst.github.io/forstringr/reference/str_mid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a segment of character strings — str_mid","text":"string text string containing characters want extract. start position first character want extract text. first character text start = 1, . n length character extract.","code":""},{"path":"https://gbganalyst.github.io/forstringr/reference/str_mid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns a segment of character strings — str_mid","text":"character vector.","code":""},{"path":[]},{"path":"https://gbganalyst.github.io/forstringr/reference/str_mid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a segment of character strings — str_mid","text":"","code":"str_mid(\"Super Eagle\", 7, 5) #> [1] \"Eagle\"  str_mid(\"Oyo Ibadan\", 5, 6) #> [1] \"Ibadan\""},{"path":"https://gbganalyst.github.io/forstringr/reference/str_right.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a substring from the end of a specified string — str_right","title":"Returns a substring from the end of a specified string — str_right","text":"Given character vector, str_right() returns right side string.","code":""},{"path":"https://gbganalyst.github.io/forstringr/reference/str_right.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a substring from the end of a specified string — str_right","text":"","code":"str_right(string, n = 1)"},{"path":"https://gbganalyst.github.io/forstringr/reference/str_right.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a substring from the end of a specified string — str_right","text":"string character right portion returned. n Optional. number        characters return right side string.","code":""},{"path":"https://gbganalyst.github.io/forstringr/reference/str_right.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns a substring from the end of a specified string — str_right","text":"character vector.","code":""},{"path":[]},{"path":"https://gbganalyst.github.io/forstringr/reference/str_right.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a substring from the end of a specified string — str_right","text":"","code":"str_right(\"Sale Price\") #> [1] \"e\"  str_right(\"Sale Price\", n = 5) #> [1] \"Price\""},{"path":"https://gbganalyst.github.io/forstringr/reference/str_rm_whitespace_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove extra spaces in a data frame — str_rm_whitespace_df","title":"Remove extra spaces in a data frame — str_rm_whitespace_df","text":"str_rm_whitespace_df() removes leading, trailing, collapses multiple consecutive white spaces non-numerical variables data frame.","code":""},{"path":"https://gbganalyst.github.io/forstringr/reference/str_rm_whitespace_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove extra spaces in a data frame — str_rm_whitespace_df","text":"","code":"str_rm_whitespace_df(df)"},{"path":"https://gbganalyst.github.io/forstringr/reference/str_rm_whitespace_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove extra spaces in a data frame — str_rm_whitespace_df","text":"df data frame data frame extension (e.g. tibble) leading trailing spaces.","code":""},{"path":"https://gbganalyst.github.io/forstringr/reference/str_rm_whitespace_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove extra spaces in a data frame — str_rm_whitespace_df","text":"clean data frame leading trailing spaces.","code":""},{"path":"https://gbganalyst.github.io/forstringr/reference/str_rm_whitespace_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove extra spaces in a data frame — str_rm_whitespace_df","text":"","code":"richest_in_nigeria #> # A tibble: 10 × 5 #>     Rank Name                   `Net worth`         Age `Source of Wealth`       #>    <dbl> <chr>                  <chr>             <dbl> <chr>                    #>  1     1 \" Aliko Dangote\"       \"$14 Billion\"        64 \"  Cement and Sugar \"    #>  2     2 \"Mike Adenuga\"         \"$7.9  Billion \"     68 \"Telecommunication,    … #>  3     3 \"Femi   Otedola\"       \"$5.9   Billion\"     59 \"Oil  and Gas\"           #>  4     4 \" Arthur Eze\"          \"$5 Billion\"         73 \"Oil and Gas\"            #>  5     5 \"Abdulsamad     Rabiu\" \"$3.7 Billion\"       61 \"Cement   and Sugar\"     #>  6     6 \" Cletus Ibeto \"       \" $3.5 Billion\"      69 \"Automobile, Real Estat… #>  7     7 \"Orji Uzor Kalu\"       \"$3.2 Billion\"       61 \"Furniture,    Publishi… #>  8     8 \"ABC Orjiakor \"        \"  $1.2 Billion\"     63 \"Oil and Gas\"            #>  9     9 \"  Jimoh Ibrahim\"      \"$1 Billion \"        54 \"Insurance, Oil and Gas… #> 10    10 \"Tony   Elumelu\"       \"$900    Million\"    58 \"  Banking  \"             str_rm_whitespace_df(richest_in_nigeria) #> # A tibble: 10 × 5 #>     Rank Name             `Net worth`    Age `Source of Wealth`                  #>    <dbl> <chr>            <chr>        <dbl> <chr>                               #>  1     1 Aliko Dangote    $14 Billion     64 Cement and Sugar                    #>  2     2 Mike Adenuga     $7.9 Billion    68 Telecommunication, Oil, and Gas     #>  3     3 Femi Otedola     $5.9 Billion    59 Oil and Gas                         #>  4     4 Arthur Eze       $5 Billion      73 Oil and Gas                         #>  5     5 Abdulsamad Rabiu $3.7 Billion    61 Cement and Sugar                    #>  6     6 Cletus Ibeto     $3.5 Billion    69 Automobile, Real Estate             #>  7     7 Orji Uzor Kalu   $3.2 Billion    61 Furniture, Publishing               #>  8     8 ABC Orjiakor     $1.2 Billion    63 Oil and Gas                         #>  9     9 Jimoh Ibrahim    $1 Billion      54 Insurance, Oil and Gas, Real Estate #> 10    10 Tony Elumelu     $900 Million    58 Banking"},{"path":"https://gbganalyst.github.io/forstringr/reference/str_split_extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the result of a positional split string — str_split_extract","title":"Extract the result of a positional split string — str_split_extract","text":"Split string pieces extract results using specific index position. Mathematically, can interpret follows: Given character string, S, extract element given position, k, result splitting S given pattern, m.","code":""},{"path":"https://gbganalyst.github.io/forstringr/reference/str_split_extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the result of a positional split string — str_split_extract","text":"","code":"str_split_extract(string, pattern, position)"},{"path":"https://gbganalyst.github.io/forstringr/reference/str_split_extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the result of a positional split string — str_split_extract","text":"string Input vector. Either character vector, something coercible one. pattern Pattern look . may also contain regular expression. position Index position return character vector.","code":""},{"path":"https://gbganalyst.github.io/forstringr/reference/str_split_extract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the result of a positional split string — str_split_extract","text":"character vector.","code":""},{"path":"https://gbganalyst.github.io/forstringr/reference/str_split_extract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the result of a positional split string — str_split_extract","text":"","code":"code <- c(\"HS-IB-EDE\", \"OG-OYO-CAS-0121\", \"NY-ILR-NIG-036\")  str_split_extract(code, \"-\", 1) #> [1] \"HS\" \"OG\" \"NY\"  str_split_extract(code, \"-\", 4) #> [1] NA     \"0121\" \"036\""},{"path":"https://gbganalyst.github.io/forstringr/reference/str_title_case.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert string to title case — str_title_case","title":"Convert string to title case — str_title_case","text":"str_title_case() converts string title case, capitalizing first letter word ignoring articles, prepositions, conjunctions","code":""},{"path":"https://gbganalyst.github.io/forstringr/reference/str_title_case.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert string to title case — str_title_case","text":"","code":"str_title_case(string)"},{"path":"https://gbganalyst.github.io/forstringr/reference/str_title_case.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert string to title case — str_title_case","text":"string Input vector. Either character vector, something coercible one.","code":""},{"path":"https://gbganalyst.github.io/forstringr/reference/str_title_case.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert string to title case — str_title_case","text":"character vector length string title case.","code":""},{"path":"https://gbganalyst.github.io/forstringr/reference/str_title_case.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert string to title case — str_title_case","text":"Please note str_title_case() different stringr::str_to_title() converts title case, first letter word capitalized.","code":""},{"path":"https://gbganalyst.github.io/forstringr/reference/str_title_case.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert string to title case — str_title_case","text":"","code":"words <- \"the quick brown fox jumps over a lazy dog\"  str_title_case(words) #> [1] \"The Quick Brown Fox Jumps over a Lazy Dog\"  str_to_title(words) #> [1] \"The Quick Brown Fox Jumps Over A Lazy Dog\"  words <- \"A journey through the history of music\"  str_title_case(words) #> [1] \"A Journey through the History of Music\"  str_to_title(words) #> [1] \"A Journey Through The History Of Music\""}]
